CREATE OR REPLACE FUNCTION  sp_login(usernameP text, passwordP text) RETURNS INTEGER AS $$
   BEGIN
		if exists(SELECT * FROM UserTable where username = usernameP and password = passwordP) then
            return 1;
      	else
        	return 0;
        end if;
   END;
$$ LANGUAGE 'plpgsql'
STABLE;


CREATE FUNCTION  sp_register(usernameP text, nameP text, passwordP text, rolP integer, activeP integer) RETURNS INTEGER AS $$
   BEGIN
		if exists(SELECT * FROM UserTable where username = usernameP) then
            return 0;
       	else
        	insert into UserTable(username, name, password, rol, active) values(usernameP, nameP, passwordP, rolP, activeP);
            return 1;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_cambiarContrasena(usernameP text, currentPassP text, newPassP text) RETURNS INTEGER AS $$
   BEGIN
		if exists(SELECT * FROM UserTable where username = usernameP and password = currentPassP) then
            update UserTable set password = newPassP where username = usernameP;
            return 1;
       	else
        	return 0;
        end if;
   END;
$$ LANGUAGE 'plpgsql'; 

CREATE FUNCTION  sp_addUser(usernameP text, nameP text, passwordP text, rolP integer, activeP integer) RETURNS INTEGER AS $$
   BEGIN
   		if exists(SELECT * FROM UserTable where username = usernameP) then
            return 0;
      	else
            insert into UserTable(username, name, password, rol, active) values(usernameP, nameP, passwordP, rolP, activeP);
        	return 1;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_updateUser(usernameP text, nameP text, rolP integer) RETURNS INTEGER AS $$  
   BEGIN
   		if exists(SELECT * FROM UserTable where username = usernameP) then
            update  UserTable set name = nameP, rol = rolP where username = usernameP;
            return 1;
      	else
        	return 0;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_disableUser(usernameP text) RETURNS VOID AS $$ 
   BEGIN
   		update  UserTable set active = 0 where username = usernameP;
   END;
$$ LANGUAGE 'plpgsql';
 
CREATE OR REPLACE FUNCTION  sp_getCupons() 
RETURNS SETOF CUPON AS $$
   	BEGIN
		RETURN QUERY SELECT * FROM CUPON;
    END; $$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION  sp_get_Additional_Info_Cupon(idParam integer) 
RETURNS SETOF CUPON_ADDITIONAL_INFO AS $$
   BEGIN
		RETURN QUERY SELECT * FROM CUPON_ADDITIONAL_INFO where idCupon = idParam;
   END; $$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION  sp_get_Restriction_Info_Cupon(idParam integer) 
RETURNS SETOF CUPON_RESTRICTION_INFO AS $$
   BEGIN
		RETURN QUERY SELECT * FROM CUPON_RESTRICTION_INFO where idCupon = idParam;
   END; $$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION  sp_getPromotions() 
RETURNS SETOF PROMOTION AS $$
   BEGIN
		RETURN QUERY SELECT * FROM PROMOTION;
   END; $$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION  sp_get_Important_Info_Promotion(idParam integer) 
RETURNS SETOF PROMOTION_IMPORTANT_INFO AS $$
   BEGIN
		RETURN QUERY SELECT * FROM PROMOTION_IMPORTANT_INFO where idPromotion = idParam;
   END; $$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION  sp_get_Must_Know_Info_Promotion(idParam integer) 
RETURNS SETOF PROMOTION_MUST_KNOW_INFO AS $$
   BEGIN
		RETURN QUERY SELECT * FROM PROMOTION_MUST_KNOW_INFO where idPromotion = idParam;
   END; $$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION  sp_getUsers()
RETURNS SETOF UserTable AS $$
   BEGIN
		RETURN QUERY SELECT * FROM UserTable where active = 1;
   END; $$
LANGUAGE 'plpgsql';


