CREATE OR REPLACE FUNCTION  sp_login(usernameP text, passwordP text) RETURNS INTEGER AS $$
   BEGIN
		if exists(SELECT * FROM UserTable where username = usernameP and password = passwordP) then
            return (select rol from UserTable where username = usernameP);
      	else
        	return -1;
        end if;
   END;
$$ LANGUAGE 'plpgsql'
STABLE;


CREATE FUNCTION  sp_register(usernameP text, nameP text, passwordP text, rolP integer, activeP integer) RETURNS INTEGER AS $$
   BEGIN
		if exists(SELECT * FROM UserTable where username = usernameP) then
            return 0;
       	else
        	insert into UserTable(username, name, password, rol, active) values(usernameP, nameP, passwordP, rolP, activeP);
            return 1;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_cambiarContrasena(usernameP text, currentPassP text, newPassP text) RETURNS INTEGER AS $$
   BEGIN
		if exists(SELECT * FROM UserTable where username = usernameP and password = currentPassP) then
            update UserTable set password = newPassP where username = usernameP;
            return 1;
       	else
        	return 0;
        end if;
   END;
$$ LANGUAGE 'plpgsql'; 


-- ---------------------------- USER ---------------------------------------

CREATE FUNCTION  sp_addUser(usernameP text, nameP text, passwordP text, rolP integer, activeP integer) RETURNS INTEGER AS $$
   BEGIN
   		if exists(SELECT * FROM UserTable where username = usernameP) then
            return 0;
      	else
            insert into UserTable(username, name, password, rol, active) values(usernameP, nameP, passwordP, rolP, activeP);
        	return 1;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_updateUser(usernameP text, nameP text, rolP integer) RETURNS INTEGER AS $$  
   BEGIN
   		if exists(SELECT * FROM UserTable where username = usernameP) then
            update  UserTable set name = nameP, rol = rolP where username = usernameP;
            return 1;
      	else
        	return 0;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_disableUser(usernameP text) RETURNS VOID AS $$ 
   BEGIN
   		update  UserTable set active = 0 where username = usernameP;
   END;
$$ LANGUAGE 'plpgsql';
 

CREATE OR REPLACE FUNCTION  sp_getUsers()
RETURNS SETOF UserTable AS $$
   BEGIN
		RETURN QUERY SELECT * FROM UserTable where active = 1;
   END; $$
LANGUAGE 'plpgsql';


-- ------------------------    CUPON    -----------------------------------------
  
CREATE OR REPLACE FUNCTION  sp_getCupons() 
RETURNS SETOF CUPON AS $$
   	BEGIN
		RETURN QUERY SELECT * FROM CUPON where active = 1;
    END; $$
LANGUAGE 'plpgsql';
 

CREATE OR REPLACE FUNCTION  sp_get_Additional_Info_Cupon(idParam integer) 
RETURNS SETOF CUPON_ADDITIONAL_INFO AS $$
   BEGIN
		RETURN QUERY SELECT * FROM CUPON_ADDITIONAL_INFO where idCupon = idParam;
   END; $$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION  sp_get_Restriction_Info_Cupon(idParam integer)
RETURNS SETOF CUPON_RESTRICTION_INFO AS $$
   BEGIN
		RETURN QUERY SELECT * FROM CUPON_RESTRICTION_INFO where idCupon = idParam;
   END; $$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION  sp_get_Cupon(idParam integer) 
RETURNS SETOF CUPON AS $$
   BEGIN
		RETURN QUERY SELECT * FROM CUPON where id = idParam;
   END; $$
LANGUAGE 'plpgsql';


CREATE FUNCTION  sp_addCupon(titleP text, subtitleP text, imageP text, maxPriceP integer, normalPriceP integer,saveP integer, soldP integer, daysP integer,activeP integer) RETURNS integer AS $$
   BEGIN
		 insert into CUPON(title,subtitle,image,maxPrice,normalPrice,save,sold,days,active) values(titleP, subtitleP, imageP, maxPriceP, normalPriceP, saveP, soldP, daysP, activeP);
   		 return (select id from Cupon order by id desc limit 1);
   END;
$$ LANGUAGE 'plpgsql';


CREATE FUNCTION  sp_add_Additional_Info_Cupon(idCuponP integer, infoP text) RETURNS INTEGER AS $$
   BEGIN
   		if exists(SELECT * FROM CUPON_ADDITIONAL_INFO where info = infoP and idCupon = idCuponP) then
            return 0;
      	else
            insert into CUPON_ADDITIONAL_INFO(idCupon,info) values(idCuponP , infoP);
        	return 1;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_add_Restriction_Info_Cupon(idCuponP integer, infoP text) RETURNS INTEGER AS $$
   BEGIN
   		if exists(SELECT * FROM CUPON_RESTRICTION_INFO where info = infoP and idCupon = idCuponP) then 
            return 0;
      	else
            insert into CUPON_RESTRICTION_INFO(idCupon,info) values(idCuponP , infoP);
        	return 1;
        end if;
   END;
$$ LANGUAGE 'plpgsql';


CREATE FUNCTION  sp_updateCupon(idP integer, titleP text, subtitleP text, imageP text, maxPriceP integer, normalPriceP integer,saveP integer, soldP integer, daysP integer) RETURNS VOID AS $$  
   BEGIN
        update  CUPON set title = titleP, subtitle = subtitleP, image = imageP, maxPrice = maxPriceP, normalPrice = normalPriceP, save = saveP, sold = soldP, days = daysP where id = idP;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_update_Additional_Info_Cupon(idP integer, infoP text) RETURNS VOID AS $$
   BEGIN
   		update CUPON_ADDITIONAL_INFO set info = infoP where id = idP;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_update_Restriction_Info_Cupon(idP integer, infoP text) RETURNS VOID AS $$
   BEGIN
   		update CUPON_RESTRICTION_INFO set info = infoP where id = idP;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_disableCupon(idP integer) RETURNS INTEGER AS $$  
   BEGIN
   		if exists(SELECT * FROM CUPON where id = idP) then
            update  CUPON set active = 0 where id = idP;
            return 1;
      	else
        	return 0;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

-- -------------------  PROMOCION    ----------------------------


CREATE OR REPLACE FUNCTION  sp_getPromotions() 
RETURNS SETOF PROMOTION AS $$
   BEGIN
		RETURN QUERY SELECT * FROM PROMOTION where active = 1;
   END; $$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION  sp_get_Promotion(idParam integer) 
RETURNS SETOF PROMOTION AS $$
   BEGIN
		RETURN QUERY SELECT * FROM PROMOTION where id = idParam;
   END; $$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION  sp_get_Important_Info_Promotion(idParam integer) 
RETURNS SETOF PROMOTION_IMPORTANT_INFO AS $$
   BEGIN
		RETURN QUERY SELECT * FROM PROMOTION_IMPORTANT_INFO where idPromotion = idParam;
   END; $$
LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION  sp_get_Must_Know_Info_Promotion(idParam integer) 
RETURNS SETOF PROMOTION_MUST_KNOW_INFO AS $$
   BEGIN
		RETURN QUERY SELECT * FROM PROMOTION_MUST_KNOW_INFO where idPromotion = idParam;
   END; $$
LANGUAGE 'plpgsql';


CREATE FUNCTION  sp_addPromotion(titleP text, image1P text, image2P text, priceP float, valueP float,discountP integer, saveP float, soldP integer, activeP integer) RETURNS INTEGER AS $$
   BEGIN
		 insert into PROMOTION(title,image1,image2,price,value,discount,save,sold,active) values(titleP , image1P , image2P , priceP , valueP ,discountP , saveP , soldP, activeP );
         return (select id from PROMOTION order by id desc limit 1);
   END;
$$ LANGUAGE 'plpgsql';


CREATE FUNCTION  sp_add_Important_Info_Promotion(idPromotionP integer, infoP text) RETURNS INTEGER AS $$
   BEGIN
      if exists(SELECT * FROM PROMOTION_IMPORTANT_INFO where info = infoP and idPromotion = idPromotionP) then
            return 0;
        else
            insert into PROMOTION_IMPORTANT_INFO(idPromotion,info) values(idPromotionP , infoP);
          return 1;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_add_Must_Know_Info_Promotion(idPromotionP integer, infoP text) RETURNS INTEGER AS $$
   BEGIN
      if exists(SELECT * FROM PROMOTION_MUST_KNOW_INFO where info = infoP and idPromotion = idPromotionP) then 
            return 0;
        else
            insert into PROMOTION_MUST_KNOW_INFO(idPromotion,info) values(idPromotionP , infoP);
          return 1;
        end if;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_update_Must_Know_Info_Promotion(idP integer, infoP text) RETURNS VOID AS $$ 
   BEGIN
        update PROMOTION_MUST_KNOW_INFO set info = infoP where id = idP;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_updatePromotion(idP integer, titleP text, image1P text, image2P text, priceP float, valueP float,discountP integer, saveP float, soldP integer) RETURNS VOID AS $$  
   BEGIN
        update  PROMOTION set title = titleP, image1 = image1P, image2 = image2P, price = priceP, value = valueP, discount = discountP, save = saveP, sold = soldP where id = idP;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_update_Important_Info_Promotion(idP integer, infoP text) RETURNS VOID AS $$ 
   BEGIN
        update PROMOTION_IMPORTANT_INFO set info = infoP where id = idP;
   END;
$$ LANGUAGE 'plpgsql';

CREATE FUNCTION  sp_disablePromotion(idP integer) RETURNS INTEGER AS $$  
   BEGIN
   		if exists(SELECT * FROM PROMOTION where id = idP) then
            update  PROMOTION set active = 0 where id = idP;
            return 1;
      	else
        	return 0;
        end if;
   END;
$$ LANGUAGE 'plpgsql';
